{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship-game/./src/modules/dom-creation.js","webpack://battleship-game/./src/modules/ship.js","webpack://battleship-game/./src/modules/gameboard.js","webpack://battleship-game/./src/modules/comp-player.js","webpack://battleship-game/./src/modules/start-popup/popup-logic.js","webpack://battleship-game/./src/modules/start-popup/popup-creation.js","webpack://battleship-game/./src/modules/game.js","webpack://battleship-game/./src/modules/player.js","webpack://battleship-game/./src/modules/init-program.js"],"sourcesContent":["function popGBSquares(gb) {\n  for (let i = 0; i < 10; ++i) {\n    const row = document.createElement('div');\n    row.classList.add('gb-row');\n    row.classList.add(`gb-row-${i}`);\n    for (let j = 0; j < 10; ++j) {\n      const square = document.createElement('div');\n      square.classList.add('gb-square');\n      square.classList.add(`gb-square-${j}`);\n      row.appendChild(square);\n    }\n    gb.appendChild(row);\n  }\n}\n\nfunction removeStartPopup() {\n  const card = document.createElement('div');\n  card.classList.add('ship-placement-popup-container');\n  card.remove();\n}\n\nfunction createWinPopup(userWin) {\n  const card = document.createElement('div');\n  card.classList.add('win-popup');\n\n  const winMsg = document.createElement('p');\n  if (userWin) {\n    winMsg.innerHTML = 'You Win!';\n  } else {\n    winMsg.innerHTML = 'You Lose!';\n  }\n  card.appendChild(winMsg);\n\n  const replayBtn = document.createElement('div');\n  replayBtn.classList.add('replay-btn');\n  const replayText = document.createElement('p');\n  replayText.innerHTML = 'Play again';\n  replayBtn.appendChild(replayText);\n  card.appendChild(replayBtn);\n\n  return card;\n}\n\nfunction createBlackBg() {\n  const background = document.createElement('div');\n  background.classList.add('black-bg');\n\n  return background;\n}\n\nexport { popGBSquares, removeStartPopup, createWinPopup, createBlackBg };\n","const Ship = (shipSquares) => {\n  const hitSquares = [];\n  for (let i = 0; i < shipSquares.length; ++i) {\n    hitSquares.push(false);\n  }\n\n  const hit = (attackCoords) => {\n    for (let i = 0; i < shipSquares.length; ++i) {\n      if (\n        shipSquares[i].x === attackCoords.x &&\n        shipSquares[i].y === attackCoords.y\n      ) {\n        hitSquares[i] = true;\n      }\n    }\n  };\n\n  const isTrue = (currVal) => currVal === true;\n\n  const isSunk = () => {\n    if (hitSquares.every(isTrue)) {\n      return true;\n    }\n    return false;\n  };\n\n  return { hit, isSunk };\n};\n\nexport default Ship;\n","import Ship from './ship';\n\nconst Gameboard = () => {\n  let board = [];\n\n  for (let i = 0; i < 10; ++i) {\n    board.push([]);\n    for (let j = 0; j < 10; ++j) {\n      board[i][j] = { populated: false, hit: false, ship: undefined };\n    }\n  }\n\n  const shipsArr = [];\n\n  function getBoard() {\n    return board;\n  }\n\n  const placeShip = (shipCoords) => {\n    let available = false;\n    for (let i = 0; i < shipCoords.length; ++i) {\n      if (board[shipCoords[i].x][shipCoords[i].y].populated === false) {\n        available = true;\n      }\n    }\n\n    if (available === true) {\n      shipsArr.push(Ship(shipCoords));\n      for (let i = 0; i < shipCoords.length; ++i) {\n        board[shipCoords[i].x][shipCoords[i].y].populated = true;\n        board[shipCoords[i].x][shipCoords[i].y].ship = shipsArr.length - 1;\n      }\n    }\n  };\n\n  const receiveAttack = (attackCoord) => {\n    if (\n      board[attackCoord.x][attackCoord.y].populated === true &&\n      board[attackCoord.x][attackCoord.y].hit === false\n    ) {\n      board[attackCoord.x][attackCoord.y].hit = true;\n      shipsArr[board[attackCoord.x][attackCoord.y].ship].hit(attackCoord);\n    } else if (\n      board[attackCoord.x][attackCoord.y].populated === false &&\n      board[attackCoord.x][attackCoord.y].hit === false\n    ) {\n      board[attackCoord.x][attackCoord.y].hit = true;\n    }\n  };\n\n  const isSunk = (ship) => ship.isSunk() === true;\n\n  const allSunk = () => {\n    if (shipsArr.every(isSunk) === true) return true;\n    return false;\n  };\n\n  const resetBoard = () => {\n    board = [];\n    for (let i = 0; i < 10; ++i) {\n      board.push([]);\n      for (let j = 0; j < 10; ++j) {\n        board[i][j] = { populated: false, hit: false, ship: undefined };\n      }\n    }\n  };\n\n  return { placeShip, receiveAttack, allSunk, getBoard, resetBoard };\n};\n\nexport default Gameboard;\n","import Gameboard from './gameboard';\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nconst CompPlayer = () => {\n  const gameboard = Gameboard();\n  let attackCoord = {};\n\n  const attack = (enemy) => {\n    let isValidCoord = false;\n\n    while (isValidCoord === false) {\n      const xCoord = getRandomInt(10);\n      const yCoord = getRandomInt(10);\n      attackCoord = { x: xCoord, y: yCoord };\n      const enemyGB = enemy.gameboard.getBoard();\n      if (enemyGB[xCoord][yCoord].hit === false) {\n        enemy.damage(attackCoord);\n        isValidCoord = true;\n      }\n    }\n  };\n\n  function getAttackCoord() {\n    return attackCoord;\n  }\n\n  const damage = (attackCoords) => {\n    gameboard.receiveAttack(attackCoords);\n  };\n\n  return { attack, damage, gameboard, getAttackCoord };\n};\n\nexport default CompPlayer;\n","let popupShips = [\n  [{}, {}, {}, {}, {}],\n  [{}, {}, {}, {}],\n  [{}, {}, {}],\n  [{}, {}, {}],\n  [{}, {}],\n];\n\n// Start Popup = spu\nfunction spuGridLogic(grid, btnContainer) {\n  let count = 0;\n\n  const rotateXBtn = btnContainer.firstChild;\n  const rotateYBtn = btnContainer.firstChild.nextSibling;\n\n  rotateXBtn.addEventListener('click', () => {\n    rotateXBtn.classList.add('rotate-btn-active');\n    if (rotateYBtn.classList.contains('rotate-btn-active')) {\n      rotateYBtn.classList.remove('rotate-btn-active');\n    }\n  });\n\n  rotateYBtn.addEventListener('click', () => {\n    rotateYBtn.classList.add('rotate-btn-active');\n    if (rotateXBtn.classList.contains('rotate-btn-active')) {\n      rotateXBtn.classList.remove('rotate-btn-active');\n    }\n  });\n\n  const initEachSquare = (row, rows, rowArr) => {\n    row.forEach((square) => {\n      const createHorizSquareArr = (currSquare) => {\n        let horizSquare = currSquare;\n        const horizSquareArr = [];\n        for (let i = 0; i < popupShips[count].length; ++i) {\n          if (horizSquare !== null) {\n            horizSquareArr.push(horizSquare);\n            horizSquare = horizSquare.nextSibling;\n          }\n        }\n        return horizSquareArr;\n      };\n\n      const createVertSquareArr = (currSquare, rowNum, squareNum) => {\n        let vertSquare = currSquare;\n        const vertSquareArr = [];\n        let rowNumTemp = rowNum + 1;\n        for (let i = 0; i < popupShips[count].length; ++i) {\n          if (rowNumTemp < 10) {\n            vertSquareArr.push(vertSquare);\n            vertSquare = [...rows[rowNumTemp].children][squareNum];\n            rowNumTemp += 1;\n          }\n        }\n        return vertSquareArr;\n      };\n\n      const isActive = (elem) => elem.classList.contains('popup-square-active');\n\n      const xAxisInvalid = (squareNum, shipSize, horizSquareArr) => {\n        if (\n          (rotateXBtn.classList.contains('rotate-btn-active') &&\n            squareNum + shipSize > 10) ||\n          (rotateXBtn.classList.contains('rotate-btn-active') &&\n            horizSquareArr.some(isActive))\n        ) {\n          return true;\n        }\n        return false;\n      };\n\n      const yAxisInvalid = (rowNum, shipSize, vertSquareArr) => {\n        if (\n          (rotateYBtn.classList.contains('rotate-btn-active') &&\n            rowNum + shipSize > 10) ||\n          (rotateYBtn.classList.contains('rotate-btn-active') &&\n            vertSquareArr.some(isActive))\n        ) {\n          return true;\n        }\n        return false;\n      };\n\n      square.addEventListener('mouseover', () => {\n        const shipSize = popupShips[count].length;\n        const hoverShip = document.createElement('div');\n        hoverShip.classList.add('floating-ship-hover');\n\n        const currRow = square.parentElement;\n        const rowNum = parseInt(currRow.className.replace(/^\\D+/g, ''), 10);\n        const squareNum = parseInt(square.className.replace(/^\\D+/g, ''), 10);\n\n        /* calc() is used to make it so the hover ship doesn't underflow\n         * it's required boxes.\n         *\n         * shipSize will determine the amount of boxes to cover\n         *\n         * shipSize * 2 is the offset needed to make the hover ship fit\n         * it's required boxes.\n         */\n        if (rotateXBtn.classList.contains('rotate-btn-active')) {\n          hoverShip.style.width = `calc(${shipSize}00% + ${shipSize * 2}px)`;\n          hoverShip.style.height = '100%';\n        } else if (rotateYBtn.classList.contains('rotate-btn-active')) {\n          hoverShip.style.height = `calc(${shipSize}00% + ${shipSize * 2}px)`;\n          hoverShip.style.width = '100%';\n        }\n\n        const horizSquareArr = createHorizSquareArr(square);\n        const vertSquareArr = createVertSquareArr(square, rowNum, squareNum);\n\n        if (xAxisInvalid(squareNum, shipSize, horizSquareArr)) {\n          hoverShip.classList.add('square-error');\n        } else if (yAxisInvalid(rowNum, shipSize, vertSquareArr)) {\n          hoverShip.classList.add('square-error');\n        }\n\n        square.appendChild(hoverShip);\n      });\n      square.addEventListener('mouseout', () => {\n        if (square.firstChild) {\n          square.firstChild.remove();\n        }\n      });\n      square.addEventListener('click', () => {\n        const shipSize = popupShips[count].length;\n        const currRow = square.parentElement;\n        const rowNum = parseInt(currRow.className.replace(/^\\D+/g, ''), 10);\n        const squareNum = parseInt(square.className.replace(/^\\D+/g, ''), 10);\n\n        const horizSquareArr = createHorizSquareArr(square);\n        const vertSquareArr = createVertSquareArr(square, rowNum, squareNum);\n\n        if (\n          xAxisInvalid(squareNum, shipSize, horizSquareArr) ||\n          yAxisInvalid(rowNum, shipSize, vertSquareArr)\n        ) {\n          console.log(\"Can't do that!\");\n        } else {\n          // Places Ships Horizontally\n          if (rotateXBtn.classList.contains('rotate-btn-active')) {\n            let currSquare = square;\n            let tempSquareNum = squareNum;\n            for (let i = 0; i < popupShips[count].length; ++i) {\n              currSquare.classList.add('popup-square-active');\n\n              const coord = { x: rowNum, y: tempSquareNum };\n              popupShips[count][i] = coord;\n              tempSquareNum += 1;\n\n              currSquare = currSquare.nextSibling;\n            }\n            count += 1;\n          }\n\n          // Places Ships Vertically\n          if (rotateYBtn.classList.contains('rotate-btn-active')) {\n            let currSquare = square;\n            let tempRowNum = rowNum;\n            for (let i = 0; i < popupShips[count].length; ++i) {\n              currSquare = rowArr[rowNum + i][squareNum];\n              currSquare.classList.add('popup-square-active');\n\n              const coord = { x: tempRowNum, y: squareNum };\n              popupShips[count][i] = coord;\n              tempRowNum += 1;\n            }\n            count += 1;\n          }\n\n          // Once the ships are populated.\n          if (count === 5) {\n            localStorage.setItem('userCoordsArr', JSON.stringify(popupShips));\n            const popup = document.querySelector(\n              '.ship-placement-popup-container'\n            );\n            popup.remove();\n          }\n        }\n      });\n    });\n  };\n\n  const rows = [...grid.children];\n  const rowSquares = [];\n  rows.forEach((row) => rowSquares.push([...row.children]));\n  rowSquares.forEach((row) => initEachSquare(row, rows, rowSquares));\n}\n\nexport default spuGridLogic;\n","import spuGridLogic from './popup-logic';\n\nfunction createStartPopup() {\n  const createCard = () => {\n    const card = document.createElement('div');\n    card.classList.add('ship-placement-popup-container');\n    return card;\n  };\n\n  const createTextContainer = () => {\n    const container = document.createElement('div');\n    container.classList.add('popup-text-container');\n\n    const title = document.createElement('p');\n    title.innerHTML = 'Welcome to BATTLESHIP!';\n    container.appendChild(title);\n\n    const subTitle = document.createElement('p');\n    subTitle.innerHTML = `Place your <u>Carrier</u>`;\n    container.appendChild(subTitle);\n\n    return container;\n  };\n\n  const createBtnContainer = () => {\n    const container = document.createElement('div');\n    container.classList.add('rotate-ship-btn-container');\n\n    const xBtn = document.createElement('div');\n    xBtn.classList.add('rotate-x-btn');\n    xBtn.classList.add('rotate-btn');\n    xBtn.classList.add('rotate-btn-active');\n    xBtn.innerHTML = 'Rotate - X';\n    container.appendChild(xBtn);\n\n    const yBtn = document.createElement('div');\n    yBtn.classList.add('rotate-y-btn');\n    yBtn.classList.add('rotate-btn');\n    yBtn.innerHTML = 'Rotate - Y';\n    container.appendChild(yBtn);\n\n    return container;\n  };\n\n  const createGridContainer = () => {\n    const container = document.createElement('div');\n    container.classList.add('popup-gb-container');\n\n    const gameboard = document.createElement('div');\n    gameboard.classList.add('popup-gb');\n    gameboard.classList.add('gameboard-interface');\n    container.appendChild(gameboard);\n\n    for (let i = 0; i < 10; ++i) {\n      const row = document.createElement('div');\n      row.classList.add('gb-row');\n      row.classList.add(`gb-popup-start-row-${i}`);\n      for (let j = 0; j < 10; ++j) {\n        const square = document.createElement('div');\n        square.classList.add('gb-square');\n        square.classList.add(`gb-popup-start-square-${j}`);\n        row.appendChild(square);\n      }\n      gameboard.appendChild(row);\n    }\n\n    return container;\n  };\n\n  const card = createCard();\n  const textContainer = createTextContainer();\n  const btnContainer = createBtnContainer();\n  const gridContainer = createGridContainer();\n\n  const containerArr = [textContainer, btnContainer, gridContainer];\n  containerArr.forEach((container) => card.appendChild(container));\n  spuGridLogic(gridContainer.firstChild, btnContainer);\n\n  return card;\n}\n\nexport default createStartPopup;\n","import Player from './player';\nimport compPlayer from './comp-player';\nimport { createWinPopup, createBlackBg, popGBSquares } from './dom-creation';\nimport createStartPopup from './start-popup/popup-creation';\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nconst Game = () => {\n  const user = Player();\n  const comp = compPlayer();\n  const userGB = document.querySelector('.gameboard-1');\n  const compGB = document.querySelector('.gameboard-2');\n\n  const placeShip = (coords, gb) => {\n    const rows = [...gb.children];\n    for (let i = 0; i < coords.length; ++i) {\n      const coord = coords[i];\n\n      const row = rows[coord.x];\n\n      const rowSquares = [...row.children];\n      const square = rowSquares[coord.y];\n      square.classList.add('square-populated');\n    }\n  };\n\n  const resetBoard = (gb) => {\n    const rows = [...gb.children];\n    rows.forEach((row) => {\n      row.remove();\n    });\n  };\n\n  const initUserShips = () => {\n    const userShipsArr = JSON.parse(localStorage.getItem('userCoordsArr'));\n    for (let i = 0; i < userShipsArr.length; ++i) {\n      user.gameboard.placeShip(userShipsArr[i]);\n      placeShip(userShipsArr[i], userGB);\n    }\n  };\n\n  const initCompShips = () => {\n    const compShips = [\n      [{}, {}, {}, {}, {}],\n      [{}, {}, {}, {}],\n      [{}, {}, {}],\n      [{}, {}, {}],\n      [{}, {}],\n    ];\n\n    const isActive = (elem) => elem.classList.contains('square-populated');\n\n    const createHorizSquareArr = (currSquare, shipSize) => {\n      let horizSquare = currSquare;\n      const horizSquareArr = [];\n      for (let i = 0; i < shipSize; ++i) {\n        if (horizSquare !== null) {\n          horizSquareArr.push(horizSquare);\n          horizSquare = horizSquare.nextSibling;\n        }\n      }\n      return horizSquareArr;\n    };\n\n    const createHorizCoords = (coord, shipSize) => {\n      const xCoord = coord.x;\n      let yCoord = coord.y;\n      const horizSquareArr = [];\n\n      for (let i = 0; i < shipSize; ++i) {\n        const newCoord = { x: xCoord, y: yCoord };\n        horizSquareArr.push(newCoord);\n        yCoord += 1;\n      }\n      return horizSquareArr;\n    };\n\n    const createVertSquareArr = (currSquare, rowNum, squareNum, shipSize) => {\n      let vertSquare = currSquare;\n      const vertSquareArr = [];\n      let rowNumTemp = rowNum;\n      for (let i = 0; i < shipSize; ++i) {\n        const row = [...compGB.children][rowNumTemp].children;\n        vertSquare = row[squareNum];\n        vertSquareArr.push(vertSquare);\n        rowNumTemp += 1;\n      }\n      return vertSquareArr;\n    };\n\n    const createVertCoords = (coord, shipSize) => {\n      let coordX = coord.x;\n      const coordY = coord.y;\n      const vertCoordArr = [];\n      for (let i = 0; i < shipSize; ++i) {\n        const vertSquare = { x: coordX, y: coordY };\n        vertCoordArr.push(vertSquare);\n        coordX += 1;\n      }\n      return vertCoordArr;\n    };\n\n    // create a coordArr of used coordinates\n    let shipIndex = 0;\n    while (compShips[shipIndex] !== undefined) {\n      const gb = comp.gameboard.getBoard();\n      const rowNum = getRandomInt(10);\n      const squareNum = getRandomInt(10);\n      const coord = { x: rowNum, y: squareNum };\n      const square = [...compGB.children][rowNum].children[squareNum];\n\n      // Checks rows and columns if they are valid for populating with ships.\n      if (!gb[rowNum][squareNum].populated) {\n        if (rowNum >= 0 && squareNum <= 10 - compShips[shipIndex].length) {\n          const horizSquareArr = createHorizSquareArr(\n            square,\n            compShips[shipIndex].length\n          );\n\n          if (!horizSquareArr.some(isActive)) {\n            const horizCoords = createHorizCoords(\n              coord,\n              compShips[shipIndex].length\n            );\n            comp.gameboard.placeShip(horizCoords);\n            placeShip(horizCoords, compGB);\n            shipIndex += 1;\n          }\n        } else if (\n          squareNum >= 0 &&\n          rowNum <= 10 - compShips[shipIndex].length\n        ) {\n          const vertSquareArr = createVertSquareArr(\n            square,\n            rowNum,\n            squareNum,\n            compShips[shipIndex].length\n          );\n\n          if (!vertSquareArr.some(isActive)) {\n            const vertCoords = createVertCoords(\n              coord,\n              compShips[shipIndex].length\n            );\n            comp.gameboard.placeShip(vertCoords);\n            placeShip(vertCoords, compGB);\n            shipIndex += 1;\n          }\n        }\n      }\n    }\n  };\n\n  const initHits = (gb) => {\n    const rows = [...gb.children];\n    for (let i = 0; i < rows.length; ++i) {\n      const row = rows[i];\n\n      const rowSquares = [...row.children];\n\n      rowSquares.forEach((square) => {\n        square.addEventListener('click', () => {\n          const name = square.className;\n          const rowNum = parseInt(name.replace(/\\D/g, ''), 10);\n          user.attack(comp, { x: i, y: rowNum });\n          square.classList.add('square-hit');\n          if (square.classList.contains('square-populated')) {\n            square.classList.add('direct-square-hit');\n          }\n          if (comp.gameboard.allSunk()) {\n            const body = document.querySelector('body');\n            const background = createBlackBg();\n            body.appendChild(background);\n            const winPopup = createWinPopup(true);\n            body.appendChild(winPopup);\n            const replayBtn = document.querySelector('.replay-btn');\n            replayBtn.addEventListener('click', () => resetGame());\n          }\n        });\n      });\n    }\n  };\n\n  const initHoverColor = (gb) => {\n    const rows = [...gb.children];\n    for (let i = 0; i < rows.length; ++i) {\n      const row = rows[i];\n\n      const rowSquares = [...row.children];\n\n      rowSquares.forEach((square) => {\n        square.addEventListener('mouseover', () => {\n          if (!square.classList.contains('square-hit')) {\n            square.classList.add('square-hover');\n          }\n        });\n\n        square.addEventListener('mouseout', () => {\n          square.classList.remove('square-hover');\n        });\n      });\n    }\n  };\n\n  const initCompBoard = () => {\n    initCompShips();\n    initHoverColor(compGB);\n    initHits(compGB);\n  };\n\n  const initUserBoard = () => {\n    initUserShips();\n  };\n\n  const attackUser = (attackCoord) => {\n    const row = [...[...userGB.children][attackCoord.x].children];\n    const hitSquare = row[attackCoord.y];\n    if (hitSquare.classList.contains('square-populated')) {\n      hitSquare.classList.add('direct-square-hit');\n    } else {\n      hitSquare.classList.add('square-hit');\n    }\n  };\n\n  const populateGB = () => {\n    initUserBoard();\n    initCompBoard();\n  };\n\n  const startLogic = () => {\n    console.log(user.gameboard.getBoard());\n    console.log(comp.gameboard.getBoard());\n\n    // Listens for user to click so enemy can attack.\n    const rows = [...compGB.children];\n    for (let i = 0; i < rows.length; ++i) {\n      const row = rows[i];\n      const rowSquares = [...row.children];\n      rowSquares.forEach((square) => {\n        square.addEventListener('click', () => {\n          if (!comp.gameboard.allSunk()) {\n            if (!square.classList.contains('marked')) {\n              square.classList.add('marked');\n              comp.attack(user);\n              attackUser(comp.getAttackCoord());\n            }\n            if (user.gameboard.allSunk()) {\n              const body = document.querySelector('body');\n              const background = createBlackBg();\n              body.appendChild(background);\n              const winPopup = createWinPopup(false);\n              body.appendChild(winPopup);\n              const replayBtn = document.querySelector('.replay-btn');\n              replayBtn.addEventListener('click', () => resetGame());\n            }\n          }\n        });\n      });\n    }\n  };\n\n  const startGame = () => {\n    const body = document.querySelector('body');\n    const startPopup = createStartPopup();\n    const background = createBlackBg();\n    body.appendChild(background);\n    body.appendChild(startPopup);\n\n    const popupGb = document.querySelector('.popup-gb');\n    popupGb.addEventListener('click', () => {\n      const userShipsArr = JSON.parse(localStorage.getItem('userCoordsArr'));\n      if (userShipsArr != null) {\n        if (userShipsArr.length !== 0) {\n          background.remove();\n          populateGB();\n          startLogic();\n        }\n      }\n    });\n  };\n\n  const resetGame = () => {\n    localStorage.setItem('userCoordsArr', JSON.stringify([]));\n    user.gameboard.resetBoard();\n    comp.gameboard.resetBoard();\n\n    const winPopup = document.querySelector('.win-popup');\n    const blackBg = document.querySelector('.black-bg');\n    winPopup.remove();\n    blackBg.remove();\n\n    resetBoard(userGB);\n    resetBoard(compGB);\n    popGBSquares(userGB);\n    popGBSquares(compGB);\n    startGame();\n  };\n\n  return { startGame, resetGame };\n};\n\nconst game = Game();\n\nexport default game;\n","import Gameboard from './gameboard';\n\nconst Player = () => {\n  const gameboard = Gameboard();\n\n  const attack = (enemy, attackCoords) => {\n    enemy.damage(attackCoords);\n  };\n\n  const damage = (attackCoords) => {\n    gameboard.receiveAttack(attackCoords);\n  };\n\n  return { attack, damage, gameboard };\n};\n\nexport default Player;\n","import { popGBSquares } from './dom-creation';\nimport game from './game';\n\nconst popGBS = () => {\n  const GB = [...document.querySelectorAll('.gameboard-interface')];\n  GB.forEach((gameboard) => popGBSquares(gameboard));\n};\n\nfunction initProgram() {\n  localStorage.setItem('userCoordsArr', JSON.stringify([]));\n  popGBS();\n  game.startGame();\n}\n\nexport default initProgram;\n"],"names":["popGBSquares","gb","i","row","document","createElement","classList","add","j","square","appendChild","createWinPopup","userWin","card","winMsg","innerHTML","replayBtn","replayText","createBlackBg","background","board","push","populated","hit","ship","undefined","shipsArr","isSunk","placeShip","shipCoords","available","length","x","y","shipSquares","hitSquares","isTrue","currVal","attackCoords","every","Ship","receiveAttack","attackCoord","allSunk","getBoard","resetBoard","getRandomInt","max","Math","floor","random","popupShips","createCard","textContainer","container","title","subTitle","createTextContainer","btnContainer","xBtn","yBtn","createBtnContainer","gridContainer","gameboard","createGridContainer","forEach","grid","count","rotateXBtn","firstChild","rotateYBtn","nextSibling","addEventListener","contains","remove","rows","children","rowSquares","rowArr","createHorizSquareArr","currSquare","horizSquare","horizSquareArr","createVertSquareArr","rowNum","squareNum","vertSquare","vertSquareArr","rowNumTemp","isActive","elem","xAxisInvalid","shipSize","some","yAxisInvalid","hoverShip","currRow","parentElement","parseInt","className","replace","style","width","height","console","log","tempSquareNum","coord","tempRowNum","localStorage","setItem","JSON","stringify","querySelector","initEachSquare","spuGridLogic","user","comp","userGB","compGB","initCompBoard","initUserBoard","startGame","resetGame","Gameboard","attack","enemy","damage","isValidCoord","xCoord","yCoord","getAttackCoord","compPlayer","coords","compShips","createHorizCoords","newCoord","createVertCoords","coordX","coordY","vertCoordArr","shipIndex","horizCoords","vertCoords","initCompShips","initHoverColor","name","body","winPopup","initHits","userShipsArr","parse","getItem","initUserShips","startPopup","createStartPopup","hitSquare","startLogic","blackBg","querySelectorAll","game"],"sourceRoot":""}